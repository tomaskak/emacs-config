(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(tango-dark))
 '(package-selected-packages '(company)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(setq inhibit-startup-message t)

(global-display-line-numbers-mode 1)

(require 'package)
(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)

(when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; Company mode settings
(use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0)
    (setq company-text-face-extra-attributes
      '(:weight bold :slant italic))
    :bind ("C-l" . company-complete)
)

;; Company Backends

;; Jedi for python
;; Issues when setting up:
;; Jedi version has to be lowered: https://github.com/davidhalter/jedi/issues/1802
;; sexpdata downgrade to 0.0.3: https://github.com/tkf/emacs-jedi/issues/368
;; run jedi:install-server in a buffer with python open to initialize the jedi epc server
(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(use-package company-jedi
 :ensure t
 :config
 (add-hook 'python-mode-hook 'my/python-mode-hook) 
 (setq jedi:complete-on-dot t)
 (setq jedi:server-args '("--log" "/Users/t.k./Home/tmp/jedi.log"))
;; (setq jedi:server-command '("/Users/t.k./.emacs.d/.python-environments/default/bin/python" "/Users/t.k./.emacs.d/elpa/jedi-core-0.2.8/jediepcserver.py"))
 )
 

;; ace-window
(use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-dispatch-always t)
)


;; avy - Visible word jump
(global-set-key (kbd "C-h") 'avy-goto-char-2)

;; expand-region - selection of current context, repeated presses to expand context outward
(use-package expand-region
  :bind ("C-q" . er/expand-region)
  :ensure t)

;; git tools -activate with "C-x g"
(use-package magit
  :ensure t)

;; python virtualenv support, 'pyvenv-activate' to set venv (Thought it was needed for jedi, but it is not)
;; (use-package pyvenv
;;   :ensure t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set up helm
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load helm and set M-x to helm, buffer to helm, and find files to herm
(use-package helm
	     :ensure t)
;;(use-package helm-config
;;	     :ensure t)
(use-package helm-ls-git
	     :ensure t)
	     
;; Use C-c h for helm instead of C-x c
;;(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(setq
 helm-split-window-in-side-p           t
   ; open helm buffer inside current window,
   ; not occupy whole other window
 helm-move-to-line-cycle-in-source     t
   ; move to end or beginning of source when
   ; reaching top or bottom of source.
 helm-ff-search-library-in-sexp        t
   ; search for library in `require' and `declare-function' sexp.
 helm-scroll-amount                    8
   ; scroll 8 lines other window using M-<next>/M-<prior>
 helm-ff-file-name-history-use-recentf t
 ;; Allow fuzzy matches in helm semantic
 helm-semantic-fuzzy-match t
 helm-imenu-fuzzy-match    t)
;; Have helm automaticaly resize the window
(helm-autoresize-mode 1)
(setq rtags-use-helm t)
(require 'helm-flycheck) ;; Not necessary if using ELPA package
(eval-after-load 'flycheck
  '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
(setq flycheck-clang-args '("-std=c++17"))
(setq flycheck-gcc-args '("-std=c++17"))